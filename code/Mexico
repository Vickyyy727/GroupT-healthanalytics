---
title: "Mexico"
output: html_document
date: "2025-01-28"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Load Packages

This code checks if packages are installed. It installs any missing packages, and then loads all needed packages. Include this at the beginning of any R code you write -- you just need to edit the list of packages at the top!

Note that \`c("x","y")' is just creating a vector with the elements x and y!

```{r, include=TRUE, results='hide'}
packages <- c("dplyr", "ggplot2", "broom", "tidyr","srvyr", "survey", "ipumsr",  "here", "car", "kableExtra", "modelsummary","stargazer","officer","flextable")
package.check <- lapply(
  packages,
  FUN = function(x) {
    if (!require(x, character.only = TRUE)) {
      install.packages(x, dependencies = TRUE)
      library(x, character.only = TRUE)
    }
  }
)
```
## Load Data

```{r, include=FALSE}
# Set working directory
setwd(here())
```

```{r, include=TRUE}
# Load data
ddi <- read_ipums_ddi("~/OneDrive - Imperial College London/IC/Health Analytics/ipumsi_00002.xml")
data <- read_ipums_micro(ddi)
```

## Select Data

```{r, include=TRUE}
# Select data
selected_vars <- c("HLTHCOV", "EDUCMX", "INCEARN", "URBAN", "SEX", "AGE")
df <- data %>% select(all_of(selected_vars))

# View data summary
summary(df)
```

## Clean Data

```{r, include=TRUE}
# Filtering outliers
df <- df %>%
  filter(
    AGE > 0 & AGE < 100,                        
    INCEARN < 99999998 & INCEARN > 0,         
    EDUCMX > 0 & EDUCMX < 800                  
  ) 
 summary(df)

# Check the missing values in each column
colSums(is.na(df))

# Delete rows with missing values
df_clean <- na.omit(df)
```

## Recode HLTHCOV

```{r, include=TRUE}
# Recode HLTHCOV: 90 = No insurance (0), Others = Has insurance (1)
df <- df %>%
  mutate(HLTHCOV = case_when(
    HLTHCOV == 90 ~ 0,  # No coverage
    HLTHCOV %in% c(98, 99) ~ NA_real_,  # Remove unknown and NIU cases
    TRUE ~ 1  # Other categories mean insured
  ))

# Remove missing values (Unknown & NIU)
df <- df %>% drop_na(HLTHCOV)

# Check recoding results
table(df$HLTHCOV)
```
## Recode URBAN

```{r, include=TRUE}
df <- df %>%
  mutate(URBAN = case_when(
    URBAN == 1 ~ "Rural",   # 1 -> rural
    URBAN == 2 ~ "Urban",   # 2 -> urban
    TRUE ~ NA_character_    # other -> NA
  )) %>%
  drop_na(URBAN)  # Remove NA

# Conversion
df$URBAN <- factor(df$URBAN, levels = c("Rural", "Urban"))

# Check
table(df$URBAN)
```
## Recode EDUCMX
```{r, include=TRUE}
df <- df %>%
  mutate(EDUCMX = case_when(
    EDUCMX %in% c(00, 10, 21, 22, 23, 29) ~ "No Education",
    EDUCMX %in% c(101, 102, 103, 104, 105, 106, 109) ~ "Primary",
    EDUCMX %in% c(211, 212, 213, 214, 219, 223, 229, 300, 310, 311, 312, 313, 314, 315, 319, 321, 322, 323, 329) ~ "Secondary",
    EDUCMX >= 400 & EDUCMX < 800 ~ "Higher Education",
    TRUE ~ NA_character_  # Delete Unknown and NIU
  )) %>%
  drop_na(EDUCMX)  # Remove missing value

# Conversion
df$EDUCMX <- factor(df$EDUCMX, levels = c("No Education", "Primary", "Secondary", "Higher Education"))

# Check
table(df$EDUCMX)
```

## Descriptive Statistics

```{r, include=TRUE}
library(webshot2)
library(gt)
library(scales)
# 1. Means and standard deviations of AGE and INCEARN
df_cont_summary <- df %>%
  summarise(
    mean_age     = round(mean(AGE, na.rm = TRUE), 2),
    sd_age       = round(sd(AGE, na.rm = TRUE), 2),
    mean_income  = round(mean(INCEARN, na.rm = TRUE), 2), 
    sd_income    = round(sd(INCEARN, na.rm = TRUE), 2)     
  )

df_cont_summary

# 2. Frequency and percentage of HLTHCOV, EDUCMX, URBAN, SEX
df_cat_summary <- df %>%
  select(HLTHCOV, EDUCMX, URBAN, SEX) %>%
  gather(variable, value) %>%  # gather results
  group_by(variable, value) %>%
  summarise(
    freq = n()
  ) %>%
  ungroup() %>%
  group_by(variable) %>%
  mutate(
    prop = freq / sum(freq), # Calculate the percentage of the category under a variable
    prop_percent = percent(prop, accuracy = 0.01) 
  ) %>%
  arrange(variable, value)

df_cat_summary

# Save continuous summary as an image
df_cont_summary %>%
  gt() %>%
  gtsave("continuous_summary.png")

# Save categorical summary as an image
df_cat_summary %>%
  gt() %>%
  gtsave("categorical_summary.png")

```
```{r, visualisation}
# Visualisation of HLTHCOV, EDUCMX, URBAN
library(patchwork)

p1 <- ggplot(df, aes(x = factor(HLTHCOV))) +
  geom_bar(fill = "red") +
  geom_text(stat = "count", aes(label = scales::comma(after_stat(count))),
            vjust = -0.5, size = 2) +  
  labs(title = "Health Insurance Coverage Distribution",
       x = "Health Insurance (0 = No, 1 = Yes)", y = "Count") +
  scale_y_continuous(labels = scales::comma, expand = expansion(mult = c(0, 0.1))) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
        axis.text.x = element_text(size = 8),
        axis.title  = element_text(size = 8)
        )

p2 <- ggplot(df, aes(x = EDUCMX)) +
  geom_bar(fill = "green") +
  geom_text(stat = "count", aes(label = comma(after_stat(count))),
            vjust = -0.5, size = 2) +
  labs(title = "Education Level") +
  scale_y_continuous(labels = comma, expand = expansion(mult = c(0, 0.1))) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
    axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
    axis.title  = element_text(size = 8)
  )

p3 <- ggplot(df, aes(x = URBAN)) +
  geom_bar(fill = "blue") +
  geom_text(stat = "count", aes(label = comma(after_stat(count))),
            vjust = -0.5, size = 2) +
  labs(title = "Urban vs. Rural") +
  scale_y_continuous(labels = comma, expand = expansion(mult = c(0, 0.1))) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
    axis.text.x = element_text(size = 8),
    axis.title  = element_text(size = 8)
  )

# Consolidation of the three figures
combined_plot <- (p1 + p2 + p3) + 
  plot_layout(ncol = 3) +
  plot_annotation(
    title = "Distributions of Key Variables",
    theme = theme(
      plot.title = element_text(size = 14, face = "bold", hjust = 0.5)
    )
  )

combined_plot

```

## Logistic Regression（No Grouping, General）

```{r, include=TRUE}

library(stargazer)
model1 <- glm(HLTHCOV ~ EDUCMX, data = df, family = binomial)

summary(model1) 
stargazer(model1, type = "html", out = "general_model_results.html") 
```

## Logistic Regression（Contain control variable）

```{r, including income variable}

df <- df %>% mutate(log_INCEARN = log(INCEARN + 1)) 
model_with_income <- glm(HLTHCOV ~ EDUCMX + log_INCEARN + SEX + AGE + URBAN, 
                             data = df, family = binomial)

summary(model_with_income)
stargazer(model_with_income, type = "html", out = "With_income_results.html") 
```

```{r, do not control income variable}
model_without_income <- glm(HLTHCOV ~ EDUCMX + SEX + AGE + URBAN, 
                            data = df, family = binomial)

summary(model_without_income)
stargazer(model_without_income, type = "html", out = "without_model_results.html") 
```

```{r, Mediation Analysis}

library(mediation)

# Conversion of educational variables to numeric variables
df$EDUCMX <- factor(df$EDUCMX, 
                    levels = c("No Education","Primary","Secondary","Higher Education"),
                    ordered = TRUE)

df <- df %>% mutate(edu_numeric = as.numeric(EDUCMX)) # Exclusion of unknown and NIU incomes

# Take a sample from the dataset (to reduce computation and avoid running out of memory)
set.seed(123)
sample_df <- df %>% sample_n(100000)

# Fitting the mediator model (predict log_INCEARN)
med.fit <- lm(log_INCEARN ~ edu_numeric + SEX + AGE + URBAN, data = sample_df)
summary(med.fit)

# Fitted Outcome Models (Predict HLTHCOV)
out.fit <- glm(HLTHCOV ~log_INCEARN + edu_numeric + SEX + AGE + URBAN, 
               data = sample_df, family = binomial(link = "logit"))
summary(out.fit)

# Mediation Analysis
set.seed(123) # Set random seed
med.out <- mediate(med.fit, out.fit, treat = "edu_numeric", mediator = "log_INCEARN", sims = 500)
summary(med.out)

# Extract mediation analysis results
med_summary <- summary(med.out)

term_mapping <- list(
  "ACME (control)" = list(estimate = "d0", ci = "d0.ci", p = "d0.p"),
  "ACME (treated)" = list(estimate = "d1", ci = "d1.ci", p = "d1.p"),
  "ADE (control)" = list(estimate = "z0", ci = "z0.ci", p = "z0.p"),
  "ADE (treated)" = list(estimate = "z1", ci = "z1.ci", p = "z1.p"),
  "Total Effect" = list(estimate = "tau.coef", ci = "tau.ci", p = "tau.p"),
  "Prop. Mediated (control)" = list(estimate = "n0", ci = "n0.ci", p = "n0.p"),
  "Prop. Mediated (treated)" = list(estimate = "n1", ci = "n1.ci", p = "n1.p"),
  "ACME (average)" = list(estimate = "d.avg", ci = "d.avg.ci", p = "d.avg.p"),
  "ADE (average)" = list(estimate = "z.avg", ci = "z.avg.ci", p = "z.avg.p"),
  "Prop. Mediated (average)" = list(estimate = "n.avg", ci = "n.avg.ci", p = "n.avg.p")
)

# Generate results
results <- lapply(names(term_mapping), function(term) {
  field <- term_mapping[[term]]
  if (!is.null(med_summary[[field$estimate]])) {
    data.frame(
      Term = term,
      Estimate = round(med_summary[[field$estimate]], 4),  
      CI_95 = paste0("[", round(med_summary[[field$ci]][1], 4), ", ", round(med_summary[[field$ci]][2], 4), "]"),
      p_value = ifelse(med_summary[[field$p]] < 0.001, "<0.001", round(med_summary[[field$p]], 3))
    )
  } else {
    cat("Field", field$estimate, "for", term, "is NULL or missing.\n")
    NULL
  }
})

# Combine results and remove NULL
results <- do.call(rbind, results[!sapply(results, is.null)])

print(results)

# Load gridExtra
library(gridExtra)

# Create plot
table_plot <- tableGrob(results, theme = ttheme_minimal())

# Save as jpeg
jpeg("mediation_results.jpeg", width = 1000, height = 600, quality = 100) 
grid.draw(table_plot)                                                 
dev.off()                                                               

# Visualization
plot(med.out)

```

# Heterogeneity Analysis
## 1. Subgrouping - urban/rural

```{r, Urban samples - Logistic Regression}
df$EDUCMX <- factor(df$EDUCMX, 
                    levels = c("No Education", "Primary", "Secondary", "Higher Education"),
                    ordered = FALSE)
urban_model <- glm(HLTHCOV ~ EDUCMX + log_INCEARN + SEX + AGE, 
                   data = df %>% filter(URBAN == "Urban"), 
                   family = binomial)

summary(urban_model)
stargazer(urban_model, type = "html", out = "urban_model.html") 
```

```{r, Rural samples - Logistic Regression}
rural_model <- glm(HLTHCOV ~ EDUCMX + log_INCEARN + SEX + AGE, 
                   data = df %>% filter(URBAN == "Rural"), 
                   family = binomial)

summary(rural_model)
stargazer(rural_model, type = "html", out = "rural_model.html") 
```

```{r}
# Extract the coefficients associated with EDUCMX
urban_coef <- coef(summary(urban_model))
rural_coef <- coef(summary(rural_model))

urban_educ_coef <- urban_coef[grep("EDUCMX", rownames(urban_coef)), ]
rural_educ_coef <- rural_coef[grep("EDUCMX", rownames(rural_coef)), ]

# Ensure consistency in coefficient names
common_names <- intersect(rownames(urban_educ_coef), rownames(rural_educ_coef))

# Initialization result storage
results <- data.frame(
  Coefficient = character(0),
  Z_Value = numeric(0),
  P_Value = numeric(0),
  stringsAsFactors = FALSE
)

# Iterate over each coefficient name and compute the z-value and p-value
for (name in common_names) {
  coef_urban <- urban_educ_coef[name, "Estimate"]
  se_urban <- urban_educ_coef[name, "Std. Error"]
  
  coef_rural <- rural_educ_coef[name, "Estimate"]
  se_rural <- rural_educ_coef[name, "Std. Error"]
  
  # z Tests
  z <- (coef_urban - coef_rural) / sqrt(se_urban^2 + se_rural^2)
  p_value <- 2 * (1 - pnorm(abs(z)))  # double-sided test
  
  # Store Results
  results <- rbind(results, data.frame(
    Coefficient = name,
    Z_Value = z,
    P_Value = p_value
  ))
}

# print results
print(results)
results <- results %>%
  mutate(across(where(is.numeric), ~ round(.x, 4))) 

# Generate HTML output
stargazer(results, type = "html", summary = FALSE, title = "Z-Test Results",
          digits = 4, out = "z_test_results.html")
```

## 2. Interaction

```{r}
library(bigglm)

interaction_model <- bigglm(HLTHCOV ~ EDUCMX * URBAN + log_INCEARN + SEX + AGE, data = df, family = binomial())

summary(interaction_model)

# Extract results
interaction_results <- tidy(interaction_model)

print(interaction_results)

# Format the results
interaction_results_formatted <- interaction_results %>%
  mutate(
    estimate = round(estimate, 4),              
    std.error = round(std.error, 4),  
    p.value = ifelse(p.value < 0.001, "<0.001", round(p.value, 3))
  )

# Create the plot
table_plot <- tableGrob(interaction_results_formatted, theme = ttheme_minimal())

# Save as jpeg
jpeg("interaction_results.jpeg", width = 1000, height = 600, quality = 100) 
grid.draw(table_plot)                                                 
dev.off()                                        
```

## Visualization - Heat Map

```{r}

# Insurance coverage of two groups
coverage_summary <- df %>%
group_by(EDUCMX, URBAN) %>%
summarise(coverage_rate = mean(HLTHCOV, na.rm = TRUE))

# Calculate min and max coverage
min_coverage <- min(coverage_summary$coverage_rate, na.rm = TRUE)
max_coverage <- max(coverage_summary$coverage_rate, na.rm = TRUE)

# Draw heat map

ggplot(coverage_summary, aes(x = EDUCMX, y = URBAN, fill = coverage_rate)) +
  geom_tile() +
  labs(title = "Effect of Education Level on Health Insurance Coverage",
       subtitle = "Heterogeneity Analysis of Urban and Rural Groups",
       x = "Education Level", y = "Residence Type", fill = "Coverage Probability") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12, face = "italic")
  ) +
scale_fill_gradientn(colors = c("#D5E0D5", "#BFD1B2",
                                "#799A64", "#425539"),
                     breaks = seq(min_coverage, max_coverage, by = 0.02),
                     limits = c(min_coverage, max_coverage),
                     labels = scales::label_number(accuracy = 0.01))

```
## Visualization - Line Plot

```{r, include=TRUE}
# Draw line plot
ggplot(coverage_summary, aes(x = EDUCMX, y = coverage_rate, color = URBAN, group = URBAN)) +
  geom_line(size = 1) +
  geom_point(size = 3) +
  labs(title = "Effect of Education Level on Health Insurance Coverage",
       subtitle = "Heterogeneity Analysis of Urban and Rural Groups",,
       x = "Education Level", y = "Coverage Probability", color = "Residence Type") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12, face = "italic")
  ) 
```

## Predicted probability

```{r}
# Re-fit the model
model <- glm(HLTHCOV ~ EDUCMX * URBAN + log_INCEARN + SEX + AGE, 
             data = df, 
             family = binomial())

# Creat a Predictive Dataset
new_data <- expand.grid(
  EDUCMX = levels(df$EDUCMX),  
  URBAN = levels(df$URBAN)    
)

# Fix other variables
new_data$log_INCEARN <- ifelse(new_data$URBAN == "Urban", 
                               mean(df$log_INCEARN[df$URBAN == "Urban"], na.rm = TRUE),
                               mean(df$log_INCEARN[df$URBAN == "Rural"], na.rm = TRUE))
new_data$SEX <- as.integer(names(sort(table(df$SEX), decreasing = TRUE)[1]))
new_data$AGE <- mean(df$AGE, na.rm = TRUE)

# Ensure factor level matching
new_data$EDUCMX <- factor(new_data$EDUCMX, levels = levels(df$EDUCMX))
new_data$URBAN <- factor(new_data$URBAN, levels = levels(df$URBAN))

# Calculation of predictive probability
new_data$predicted_prob <- predict(model, newdata = new_data, type = "response")

# Plot predicted probabilities
ggplot(new_data, aes(x = EDUCMX, y = predicted_prob, color = URBAN, group = URBAN)) +
  geom_point(size = 3) +
  geom_line(size = 1) +
  labs(title = "Predicted Probability of Health Insurance Coverage",
       x = "Education Level",
       y = "Predicted Probability",
       color = "Residence Type") +
  theme_minimal()

library(knitr)

new_data <- new_data %>%
  mutate(across(where(is.numeric), ~ round(.x, 4))) 

# Generate HTML output
kable(new_data, format = "html", digits = 4) %>%
  kable_styling(full_width = FALSE) %>%
  save_kable("predicted_probabilities.html")
```
